{"version":3,"sources":["redux/dashBoard/dashBoardReducer.js","redux/token/tokenReducer.js","redux/dashBoard/newTaskReduser.js","redux/user/userReducer.js","redux/dashBoard/chellangeReducer.js","router.js","App.js","redux/store.js","index.js"],"names":["dashBoardSlice","createSlice","name","initialState","today","tomorrow","allRest","done","challenge","reducers","createTask","state","payload","deleteTask","updateTasks","getTasks","updateToday","actualToday","map","item","_id","updateTomorrow","actualTomorrow","abortTaskCreate","shift","updateAllRest","actualAllRest","tokenSlice","getToken","token","clearToken","newTaskSlice","startTask","cancelTask","userSlice","nickName","getUser","nickname","clearUser","email","userId","chellangeSlice","startChellange","deleteChellange","LoginPage","lazy","DashboardPage","App","fallback","path","component","to","exact","useRoute","useSelector","persistConfig","key","storage","authReducer","combineReducers","reducer","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","process","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e82589f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const dashBoardSlice = createSlice({\r\n  name: 'dashboard',\r\n  initialState: {\r\n    today: [],\r\n    tomorrow: [],\r\n    allRest: [],\r\n    done: [],\r\n    challenge: [],\r\n  },\r\n  reducers: {\r\n    createTask: (state, { payload }) => {\r\n      return { ...state, today: [payload, ...state.today] };\r\n    },\r\n    deleteTask: (state, { payload }) => {\r\n      return { ...state };\r\n    },\r\n    updateTasks: (state, { payload }) => {\r\n      return {\r\n        ...payload,\r\n      };\r\n    },\r\n    getTasks: (state, { payload }) => {\r\n      return {\r\n        ...payload,\r\n      };\r\n    },\r\n    updateToday: (state, { payload }) => {\r\n      const actualToday = state.today.map(item => {\r\n        if (item._id === payload._id) {\r\n          return payload;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        today: actualToday,\r\n      };\r\n    },\r\n\r\n    updateTomorrow: (state, { payload }) => {\r\n      const actualTomorrow = state.tomorrow.map(item => {\r\n        if (item._id === payload._id) {\r\n          return payload;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        tomorrow: actualTomorrow,\r\n      };\r\n    },\r\n\r\n    abortTaskCreate: (state, { payload }) => {\r\n      state.today.shift(0);\r\n      return state;\r\n    },\r\n    updateAllRest: (state, { payload }) => {\r\n      const actualAllRest = state.allRest.map(item => {\r\n        if (item._id === payload._id) {\r\n          return payload;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        allRest: actualAllRest,\r\n      };\r\n    },\r\n  },\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const tokenSlice = createSlice({\r\n  name: 'token',\r\n  initialState: null,\r\n  reducers: {\r\n    getToken: (state, { payload }) => payload.token,\r\n    clearToken: () => null,\r\n  },\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const newTaskSlice = createSlice({\r\n  name: 'isNewTask',\r\n  initialState: true,\r\n  reducers: {\r\n    startTask: state => {\r\n      return true;\r\n    },\r\n    cancelTask: state => {\r\n      return false;\r\n    },\r\n  },\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    nickName: '',\r\n  },\r\n  reducers: {\r\n    getUser: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        nickname: payload,\r\n      };\r\n    },\r\n    clearUser: () => ({\r\n      email: null,\r\n      userId: null,\r\n    }),\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chellangeSlice = createSlice({\r\n  name: \"isNewChellange\",\r\n  initialState: true,\r\n  reducers: {\r\n    startChellange: state => {\r\n      return false;\r\n    },\r\n    deleteChellange: state => {\r\n      return true;\r\n    },\r\n  },\r\n});\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = lazy(() =>\r\n  import('./pages/LoginPage' /* webpackChunkName: \"LoginPage\" */),\r\n);\r\n\r\nconst DashboardPage = lazy(() =>\r\n  import('./pages/DashboardPage' /* webpackChunkName: \"DashboardPage\" */),\r\n);\r\n\r\nexport const useRoute = token => {\r\n  if (!token) {\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LoginPage} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  }\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Switch>\r\n        <Route path=\"/dashboard\" component={DashboardPage} />\r\n        <Redirect to=\"/dashboard\" />\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport { useRoute } from './router';\r\n\r\nfunction App() {\r\n  const token = useSelector(state => state.token);\r\n  const routing = useRoute(token);\r\n  return routing;\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport { tokenSlice } from './token/tokenReducer';\r\nimport { userSlice } from './user/userReducer';\r\nimport { dashBoardSlice } from './dashBoard/dashBoardReducer';\r\nimport { chellangeSlice } from './dashBoard/chellangeReducer';\r\nimport { newTaskSlice } from './dashBoard/newTaskReduser';\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nexport const authReducer = combineReducers({\r\n  [tokenSlice.name]: tokenSlice.reducer,\r\n  [userSlice.name]: userSlice.reducer,\r\n  [dashBoardSlice.name]: dashBoardSlice.reducer,\r\n  [chellangeSlice.name]: chellangeSlice.reducer,\r\n  [newTaskSlice.name]: newTaskSlice.reducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, authReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [...getDefaultMiddleware({ serializableCheck: false })],\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\npersistStore(store);\r\n","import \"./stylesheet/libs/normalize.css\";\r\nimport \"./stylesheet/fonts.css\";\r\nimport \"./stylesheet/app.css\";\r\nimport \"./stylesheet/react-datetime.css\";\r\n\r\nimport React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { store } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Route component={App} />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}